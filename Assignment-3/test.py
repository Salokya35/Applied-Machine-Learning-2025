# -*- coding: utf-8 -*-
"""unit_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jKXpsmsrTsDXbo8pwvg4hdfIsssogQWc
"""

import joblib
import numpy as np
import os
import re
import string
import nltk
from nltk.corpus import stopwords
from sklearn.base import BaseEstimator

# Download stopwords (if not already downloaded)
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

from google.colab import drive
drive.mount('/content/drive')

import joblib
import re
import string

model_path = "/content/drive/MyDrive/logistic_regression_model.pkl"
model = joblib.load(model_path)

if not hasattr(model, "predict_proba"):
    raise TypeError("Loaded model is not a valid scikit-learn pipeline with predict_proba.")

def preprocess_text(text):
    """Lowercase, remove punctuation & special characters"""
    text = text.lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.strip()
    return text

def score(text: str, model, threshold: float = 0.5):
    """Score a text message using a trained model pipeline"""
    # Preprocess text
    preprocessed_text = preprocess_text(text)

    # Predict using the model pipeline (includes vectorization)
    propensity = model.predict_proba([preprocessed_text])[:, 1][0]
    prediction = propensity >= threshold

    return bool(prediction), float(propensity)

print(score("test message", model))

print(type(model))

from __main__ import score, model  # Since everything is in the same notebook
import unittest

class TestScoreFunction(unittest.TestCase):

    def test_smoke(self):
        """Smoke test: Check if function runs without crashing"""
        try:
            score("Free money now!", model, 0.5)
        except Exception as e:
            self.fail(f"score() crashed with error: {e}")

    def test_output_format(self):
        """Check if output is a tuple (bool, float)"""
        prediction, propensity = score("You won a lottery!", model, 0.5)
        self.assertIsInstance(prediction, bool)
        self.assertIsInstance(propensity, float)

    def test_prediction_values(self):
        """Ensure prediction is 0 or 1, and propensity is between 0 and 1"""
        _, propensity = score("Get a free iPhone now!", model, 0.5)
        self.assertGreaterEqual(propensity, 0.0)
        self.assertLessEqual(propensity, 1.0)

    def test_threshold_behavior(self):
        """Check behavior when threshold is 0 or 1"""
        pred_low, _ = score("Claim your prize now", model, 0.0)
        pred_high, _ = score("Claim your prize now", model, 1.0)
        self.assertEqual(pred_low, True)  # Should always predict spam
        self.assertEqual(pred_high, False)  # Should always predict ham

    def test_obvious_spam(self):
        print("Debug: Running test_obvious_spam")
        spam_message = "great news call freefone 08006344447 claim guaranteed Â£1000 cash"
        prediction, confidence = score(spam_message, model)
        print(f"Spam Prediction: {prediction}, Confidence: {confidence}")
        self.assertEqual(prediction, True)  # Expecting spam (1/True)

    def test_obvious_ham(self):
        print("Debug: Running test_obvious_ham")
        ham_message = "Hey, let's meet for lunch at 1 pm. Let me know if that works!"
        prediction, confidence = score(ham_message, model)
        print(f"Ham Prediction: {prediction}, Confidence: {confidence}")
        self.assertEqual(prediction, False)  # Expecting ham (0/False)

if __name__ == "__main__":
        unittest.main(argv=['first-arg-is-ignored'], exit=False, verbosity=2)